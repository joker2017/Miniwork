name: Deploy BG
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'why'
        required: false
        default: 'just for fun'

env:
  #TAG1: ${{ github.sha }}
  PROFILE_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/profile:${{ github.sha }}
  ACCOUNT_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/account:${{ github.sha }}
  #NGINX_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/nginx:${{ github.sha }}

jobs:
  build-account:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Login to Dockerhub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Setup Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Account
      uses: docker/build-push-action@v3
      with:
        context: ./account
        file: ./account/Dockerfile
        push: true
        tags: ${{ env.ACCOUNT_IMAGE }}
        #tags: ${{ secrets.DOCKER_HUB_USERNAME }}/account:${{ env.TAG1 }}

  build-profile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}


      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Profile
        uses: docker/build-push-action@v3
        with:
          context: ./profile
          file: ./profile/Dockerfile
          push: true
          #build-args: SERVER_URL=${{ secrets.API_SERVER_URL }}
          tags: ${{ env.PROFILE_IMAGE }}
          #tags: ${{ secrets.DOCKER_HUB_USERNAME }}/profile:${{ env.TAG1 }}
          #quay.io/siddhesh_ghadi/multi-arch-gha:latest
          #hub.docker.com/depsemt2009/profile:latest



  update-yc:
    runs-on: ubuntu-latest
    needs: [ build-account, build-profile]
    timeout-minutes: 5
    steps:
      - name: print out example job
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 158.160.127.41
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          passphrase: ${{ secrets.PASSPHRASE }}
          command_timeout: 30m
          script_stop: true
          script: |
            #curl https://raw.githubusercontent.com/joker2017/Miniwork/main/docker-compose.yaml -o tmp/docker-compose.yaml
            #curl https://raw.githubusercontent.com/joker2017/Miniwork/main/docker-compose.yaml -o home/depsemt2009/docker-compose.yml
            docker system prune --all --force --volumes
            #docker pull ${{ env.PROFILE_IMAGE }}
            #docker pull ${{ env.ACCOUNT_IMAGE }}
            echo "111"          
                        
            service_name1=profile
            service_name2=account
            echo "222"
            old_profile_id=$(docker ps -f name=$service_name1 -q | tail -n1)
            old_account_id=$(docker ps -f name=$service_name2 -q | tail -n1)
            echo "333"
           
            
            echo "33333333  ${{ env.PROFILE_IMAGE }}  33333333"
            network_mode=$(docker inspect $old_profile_id --format '{{ .HostConfig.NetworkMode }}')
            echo "network_mode = $network_mode"
            docker run --name green_profile -it -d --network=$network_mode ${{ env.PROFILE_IMAGE }}
            docker run --name green_account -it -d --network=$network_mode ${{ env.ACCOUNT_IMAGE }}
            
            #TAG=${{ env.TAG1 }} docker-compose up -d --no-deps --no-recreate $service_name1 $service_name2
            echo "444"
            
            TAG=3af887d0095d9cae571d89af921b47c497305633 docker rollout -f docker-compose.yml coi-account-1
            docker exec nginx /usr/sbin/nginx -s reload
            echo "555"
            docker stop $old_profile_id
            docker rm $old_profile_id
            echo "666"
            docker stop $old_account_id
            docker rm $old_account_id
            echo "777"
            docker rename green_profile blue_profile
            docker rename green_account blue_account
            docker exec nginx /usr/sbin/nginx -s reload
            echo "succesfully redeployed $service_name1 and $service_name2"